{"version":3,"sources":["components/Counter.js","reducers/index.js","saga.js","reduxStore.js","index.js"],"names":["Counter","props","handleChange","bind","handleSubmit","state","value","event","this","setState","target","preventDefault","onIncrement","onDecrement","onMultiply","onDevide","onSubmit","class","onClick","type","onChange","Component","mainReducerFunction","action","payload","fetchUser","workWithChannel","mySaga","Pusher","log","m","console","pusher","cluster","authEndpoint","pusherChanellName","pusherEventName","pusherChannel","subscribe","meta","ignore","trigger","select","call","updateSate","createPusherChannel","id","eventChannel","emit","onPush","message","unBind","unsubscribe","channel","take","put","error","getInitState","axios","get","newState","post","fork","result","data","takeEvery","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","counter","applyMiddleware","run","rootEl","document","getElementById","render","ReactDOM","getState","dispatch"],"mappings":"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","file":"static/js/main.475d421f.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {value: ''};\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    const { value, onIncrement, onDecrement, onMultiply, onDevide } = this.props\n    return (\n      <form onSubmit={this.handleSubmit}>\n      <p class='box'>\n        <h1> State Data: {value} </h1>\n        {' '}\n        <button class='operator' onClick={() => onIncrement(this.state.value)}>\n          +\n        </button>\n        {' '}\n        <button class='operator' onClick={() => onDecrement(this.state.value)}>\n          -\n        </button>\n        {' '}\n        <button class='operator' onClick={() => onMultiply(this.state.value)}>\n          *\n        </button>\n        {' '}\n        <button class='operator' onClick={() => onDevide(this.state.value)}>\n          /\n        </button>\n        {' '}\n        <label class='indent'>\n        <br/>\n        </label>\n      </p>\n          <input class='indent' type=\"number\" value={this.state.value} onChange={this.handleChange} />\n      </form>\n    )\n  }\n}\n\nCounter.propTypes = {\n  value: PropTypes.number.isRequired,\n  onIncrement: PropTypes.func.isRequired,\n  onDecrement: PropTypes.func.isRequired\n}\n\nexport default Counter\n","const mainReducerFunction = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + +action.payload\n    case 'DECREMENT':\n      return state - +action.payload\n    case 'MULTIPLY':\n      return state * +action.payload\n    case 'DEVIDE':\n      return state / +action.payload\n    case 'INIT-STATE':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport default mainReducerFunction;\n","import { select, takeEvery, fork, take, put, call } from 'redux-saga/effects'\nimport { eventChannel } from 'redux-saga';\nimport Pusher from 'pusher-js';\nimport axios from 'axios';\n\nPusher.log = (m) => console.log(m);\n\nconst pusher = new Pusher('5a6bc08cf2035650b864', {\n  cluster: 'eu',\n  authEndpoint: '/pusher/auth'\n});\n\nconst pusherChanellName = 'private-test';\nconst pusherEventName = 'client-test';\nlet pusherChannel = pusher.subscribe(pusherChanellName);\n\nfunction* fetchUser(action) {\n  if (!action.meta || !action.meta.ignore) {\n    pusherChannel.trigger(pusherEventName, action)\n    const state = yield select();\n    yield call(updateSate, state)\n  }\n}\n\nfunction createPusherChannel(id) {\n  return eventChannel(emit => {\n    const onPush = message => {\n      message.meta = { ignore: true }\n      emit(message)\n    };\n    pusherChannel.bind(pusherEventName, onPush);\n    return () => {\n      pusherChannel.unBind(pusherEventName, onPush);\n      pusher.unsubscribe(id);\n    };\n  });\n}\nfunction* workWithChannel(channel) {\n  try {\n    while (true) {\n      const message = yield take(channel);\n      yield put(message);\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction getInitState() {\n return axios.get('/init-state');\n}\n\nfunction updateSate(newState) {\n  return axios.post('/post-state', { newState })\n}\n\nfunction* mySaga() {\n  const channel = yield createPusherChannel(pusherChanellName);\n  yield fork(workWithChannel, channel);\n  const result = yield call(getInitState);\n  yield put({\n    type: 'INIT-STATE',\n    payload: result.data.state\n  })\n  console.log(result);\n  yield takeEvery(\"*\", fetchUser);\n}\n\nexport default mySaga;\n","import createSagaMiddleware from 'redux-saga';\nimport { compose, createStore, applyMiddleware } from 'redux'\nimport counter from './reducers'\n\nimport mySaga from './saga';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n  counter,\n  composeEnhancer(applyMiddleware(sagaMiddleware))\n);\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\nexport default store;\n","import ReactDOM from 'react-dom'\nimport Counter from './components/Counter'\nimport store from './reduxStore'\n\nconst rootEl = document.getElementById('root')\n\nconst render = () => ReactDOM.render(\n  <Counter\n    value={store.getState()}\n    onIncrement={payload => store.dispatch({ type: 'INCREMENT', payload })}\n    onDecrement={payload => store.dispatch({ type: 'DECREMENT', payload })}\n    onMultiply={payload => store.dispatch({ type: 'MULTIPLY', payload })}\n    onDevide={payload => store.dispatch({ type: 'DEVIDE', payload })}\n  />,\n  rootEl\n)\n\nrender()\nstore.subscribe(render)\n"],"sourceRoot":""}